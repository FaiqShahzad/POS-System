/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pos.system;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Faiq Shahzad
 */
public class Transaction_Page extends javax.swing.JFrame {

    POS_DataMembers POS_Data;
    DAL DAL_Object;
    Transaction transaction;

    /**
     * Creates new form Home_Page
     */
    public Transaction_Page(POS_DataMembers POS_Data) {
        this.POS_Data = POS_Data;
        this.DAL_Object = new DAL();
        this.transaction = new Transaction();

        initComponents();

        full_name_variable_label.setText(POS_Data.signedInUserFullName);

        DateFormat dateFormat = new SimpleDateFormat("dd/MM/YYYY");
        Date date = new Date();
        Calendar calendar = Calendar.getInstance();

        date_variable_label.setText(dateFormat.format(date));

        DefaultListModel<String> listModel = new DefaultListModel<>();

        ResultSet resultSet = DAL_Object.runQueryAndGetTable("select * from Inventory");

        try {
            while (resultSet.next()) {
                if (resultSet.getInt(4) > 0) {
                    listModel.addElement(Integer.toString((resultSet.getInt(1))));
                }
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        inventoryList.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userDetailsLabel = new javax.swing.JLabel();
        cashierNameLabel = new javax.swing.JLabel();
        proceedToCheckoutButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        inventoryLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryList = new javax.swing.JList<>();
        dateLabel = new javax.swing.JLabel();
        date_variable_label = new javax.swing.JLabel();
        full_name_variable_label = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        addItemButton = new javax.swing.JButton();
        removeItemButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        newTransactionLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectionTable = new javax.swing.JTable();
        transactionPageBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userDetailsLabel.setFont(new java.awt.Font("Courier New", 0, 16)); // NOI18N
        userDetailsLabel.setForeground(new java.awt.Color(255, 255, 255));
        userDetailsLabel.setText("User Details");
        getContentPane().add(userDetailsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, -1));

        cashierNameLabel.setFont(new java.awt.Font("Courier New", 0, 16)); // NOI18N
        cashierNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        cashierNameLabel.setText("Cashier Name:");
        getContentPane().add(cashierNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        proceedToCheckoutButton.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        proceedToCheckoutButton.setText("Proceed To Checkout");
        proceedToCheckoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedToCheckoutButtonActionPerformed(evt);
            }
        });
        getContentPane().add(proceedToCheckoutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, -1, 40));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Name", "Price", "Quantity", "Company"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 506, -1));

        inventoryLabel.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        inventoryLabel.setForeground(new java.awt.Color(255, 255, 255));
        inventoryLabel.setText("Inventory");
        getContentPane().add(inventoryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        cancelButton.setFont(new java.awt.Font("Courier New", 0, 16)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, 110, 40));

        inventoryList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        inventoryList.setPreferredSize(new java.awt.Dimension(50, 90));
        inventoryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inventoryList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 60, 180));

        dateLabel.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        dateLabel.setForeground(new java.awt.Color(255, 255, 255));
        dateLabel.setText("Date:");
        getContentPane().add(dateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 40, -1, -1));

        date_variable_label.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        date_variable_label.setForeground(new java.awt.Color(255, 255, 255));
        date_variable_label.setText("dd/mm/yyyy");
        getContentPane().add(date_variable_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 40, -1, -1));

        full_name_variable_label.setFont(new java.awt.Font("Courier New", 0, 16)); // NOI18N
        full_name_variable_label.setForeground(new java.awt.Color(255, 255, 255));
        full_name_variable_label.setText("full_name");
        getContentPane().add(full_name_variable_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, -1, -1));

        quantitySpinner.setMinimumSize(new java.awt.Dimension(100, 50));
        quantitySpinner.setPreferredSize(new java.awt.Dimension(100, 50));
        getContentPane().add(quantitySpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 70, 30));

        addItemButton.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        addItemButton.setText("Add Item");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, 120, 30));

        removeItemButton.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        removeItemButton.setText("Remove Item");
        removeItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 300, 150, 30));

        outputLabel.setFont(new java.awt.Font("Courier New", 0, 16)); // NOI18N
        outputLabel.setForeground(new java.awt.Color(255, 255, 255));
        outputLabel.setText("Select Item To Add");
        getContentPane().add(outputLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, 180, 30));

        quantityLabel.setFont(new java.awt.Font("Courier New", 1, 16)); // NOI18N
        quantityLabel.setForeground(new java.awt.Color(255, 255, 255));
        quantityLabel.setText("Quantity");
        getContentPane().add(quantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, -1, -1));

        newTransactionLabel.setFont(new java.awt.Font("Courier New", 1, 36)); // NOI18N
        newTransactionLabel.setForeground(new java.awt.Color(255, 255, 255));
        newTransactionLabel.setText("New Transaction");
        getContentPane().add(newTransactionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 330, 40));

        selectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Barcode", "Name", "Price", "Quantity", "Company"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(selectionTable);
        if (selectionTable.getColumnModel().getColumnCount() > 0) {
            selectionTable.getColumnModel().getColumn(0).setResizable(false);
            selectionTable.getColumnModel().getColumn(1).setResizable(false);
            selectionTable.getColumnModel().getColumn(2).setResizable(false);
            selectionTable.getColumnModel().getColumn(3).setResizable(false);
            selectionTable.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 540, 510, 40));

        transactionPageBackground.setForeground(new java.awt.Color(255, 255, 255));
        transactionPageBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pos/system/transactionPageBackground.jpg"))); // NOI18N
        transactionPageBackground.setText("bg");
        getContentPane().add(transactionPageBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void proceedToCheckoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedToCheckoutButtonActionPerformed
        //this.dispose();

        this.setVisible(false);

        new Checkout_Page(this, POS_Data, transaction).setVisible(true);
    }//GEN-LAST:event_proceedToCheckoutButtonActionPerformed

    private void inventoryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryListMouseClicked

        int barcode = Integer.parseInt(inventoryList.getSelectedValue());

        ResultSet resultSet = DAL_Object.runQueryAndGetTable("select * from Inventory where barcode = " + Integer.toString(barcode));

        try {
            if (resultSet.next()) {
                DefaultTableModel tableModel = (DefaultTableModel) selectionTable.getModel();

                tableModel.removeRow(0);

                tableModel.insertRow(tableModel.getRowCount(), new Object[]{resultSet.getInt(1), resultSet.getString(2), resultSet.getFloat(3), resultSet.getInt(4), resultSet.getString(5)});
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_inventoryListMouseClicked

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed

        int selectedQuantity = (int) quantitySpinner.getValue();

        if (selectedQuantity > 0) {
            int barcode = Integer.parseInt(inventoryList.getSelectedValue());

            ResultSet resultSet = DAL_Object.runQueryAndGetTable("select * from Inventory where barcode=" + Integer.toString(barcode));

            Item selectedItem = null;

            try {
                if (resultSet.next()) {
                    selectedItem = new Item(resultSet.getInt(1), resultSet.getString(2), resultSet.getFloat(3), resultSet.getInt(4), resultSet.getString(5));

                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }

            int initialQuantity = selectedItem.getQuantity();

            int resultantQuantity = initialQuantity - selectedQuantity;

            if (resultantQuantity >= 0) {

                DAL_Object.runQuery("update Inventory set quantity = " + Integer.toString(resultantQuantity) + " where barcode = " + Integer.toString(barcode));

                selectedItem.setQuantity(selectedQuantity);

                transaction.addItem(selectedItem);

                // insert item into the order table
                DefaultTableModel tableModel = (DefaultTableModel) orderTable.getModel();

                tableModel.insertRow(tableModel.getRowCount(), new Object[]{selectedItem.getBarCode(), selectedItem.getName(), selectedItem.getPrice(), selectedItem.getQuantity(), selectedItem.getCompany()});

                tableModel = (DefaultTableModel) selectionTable.getModel();

                // update the quantity of item in the selection table
                tableModel.removeRow(0);

                tableModel.insertRow(tableModel.getRowCount(), new Object[]{selectedItem.getBarCode(), selectedItem.getName(), selectedItem.getPrice(), resultantQuantity, selectedItem.getCompany()});

                DefaultListModel<String> listModel = new DefaultListModel<>();

                // update the items in the list of items if an item's quantity has reached zero
                if (resultantQuantity == 0) {

                    listModel.removeAllElements();

                    resultSet = DAL_Object.runQueryAndGetTable("select * from Inventory");

                    try {
                        while (resultSet.next()) {
                            if (resultSet.getInt(4) > 0) {
                                listModel.addElement(Integer.toString((resultSet.getInt(1))));
                            }
                        }
                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    }

                    inventoryList.setModel(listModel);
                }
            } else {
                outputLabel.setText("Invalid Quantity!");
            }
        } else {
            outputLabel.setText("Invalid Quantity!");
        }

    }//GEN-LAST:event_addItemButtonActionPerformed

    private void removeItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemButtonActionPerformed
        int barcode = (int) orderTable.getValueAt(orderTable.getSelectedRow(), 0);

        int quantity = (int) orderTable.getValueAt(orderTable.getSelectedRow(), 3);

        DefaultTableModel tableModel = (DefaultTableModel) orderTable.getModel();

        tableModel.removeRow(orderTable.getSelectedRow());

        DAL_Object.runQuery("update Inventory set quantity = (quantity + " + Integer.toString(quantity) + ") where barcode = " + Integer.toString(barcode));

        DefaultListModel<String> listModel = new DefaultListModel<>();

        listModel.removeAllElements();

        ResultSet resultSet = DAL_Object.runQueryAndGetTable("select * from Inventory");

        try {
            while (resultSet.next()) {
                if (resultSet.getInt(4) > 0) {
                    listModel.addElement(Integer.toString((resultSet.getInt(1))));
                }
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        inventoryList.setModel(listModel);

        transaction.removeItem(barcode);
    }//GEN-LAST:event_removeItemButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();

        new Home_Page(POS_Data).setVisible(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transaction_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transaction_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transaction_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transaction_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transaction_Page(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cashierNameLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel date_variable_label;
    private javax.swing.JLabel full_name_variable_label;
    private javax.swing.JLabel inventoryLabel;
    private javax.swing.JList<String> inventoryList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel newTransactionLabel;
    private javax.swing.JTable orderTable;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JButton proceedToCheckoutButton;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JTable selectionTable;
    private javax.swing.JLabel transactionPageBackground;
    private javax.swing.JLabel userDetailsLabel;
    // End of variables declaration//GEN-END:variables
}
